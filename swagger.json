{
  "openapi": "3.0.3",
  "info": {
    "title": "OpenAPI 3.0",
    "description": "",
    "version": "1.0.11"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "routes",
      "description": "Everything about your Routes"
    },
    {
      "name": "jwt",
      "description": "JWT operations"
    }
  ],
  "paths": {
    "/crypto/jwt/sign": {
      "post": {
        "tags": ["jwt"],
        "summary": "Sign a JWT with an expiration date",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "type": "object",
                    "description": "The data to include in the JWT payload",
                    "example": {
                      "username": "john",
                      "role": "admin"
                    }
                  },
                  "secret": {
                    "type": "string",
                    "description": "The secret key used to sign the JWT",
                    "example": "my-secret-key"
                  },
                  "options": {
                    "type": "object",
                    "description": "Options for the JWT",
                    "example": {
                      "expiresIn": "1h"
                    }
                  }
                },
                "required": ["payload", "secret"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The signed JWT",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Jwt token has been signed"
                    },
                    "data": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4iLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE2MTg5NjYzNTJ9.1UKHk3qZxnC6IgiHRak48svK-XaylNknRcR6UgAX6NQ"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/crypto/jwt/verify": {
      "post": {
        "tags": ["jwt"],
        "summary": "Verify a JWT with a secret key and options",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The JWT to verify",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4iLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE2MTg5NjYzNTJ9.1UKHk3qZxnC6IgiHRak48svK-XaylNknRcR6UgAX6NQ"
                  },
                  "secret": {
                    "type": "string",
                    "description": "The secret key used to sign the JWT",
                    "example": "my-secret-key"
                  },
                  "options": {
                    "type": "object",
                    "description": "Options for verifying the JWT",
                    "example": {
                      "algorithms": ["HS256"]
                    }
                  }
                },
                "required": ["token", "secret"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The verified JWT payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Token verified"
                    },
                    "data": {
                      "type": "object",
                      "description": "The decoded JWT payload",
                      "example": {
                        "username": "john",
                        "role": "admin",
                        "exp": 1618966352
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The JWT could not be verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid token"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/express": {
      "get": {
        "tags": ["routes"],
        "operationId": "getexpress"
      },
      "post": {
        "tags": ["routes"],
        "operationId": "postexpress"
      },
      "put": {
        "tags": ["routes"],
        "operationId": "putexpress"
      },
      "patch": {
        "tags": ["routes"],
        "operationId": "patchexpress"
      },
      "delete": {
        "tags": ["routes"],
        "operationId": "deleteexpress"
      }
    },
    "/function": {
      "get": {
        "tags": ["routes"],
        "operationId": "getfunction"
      },
      "post": {
        "tags": ["routes"],
        "operationId": "postfunction"
      },
      "put": {
        "tags": ["routes"],
        "operationId": "putfunction"
      },
      "patch": {
        "tags": ["routes"],
        "operationId": "patchfunction"
      },
      "delete": {
        "tags": ["routes"],
        "operationId": "deletefunction"
      }
    },
    "/lambda": {
      "get": {
        "tags": ["routes"],
        "operationId": "getlambda"
      },
      "post": {
        "tags": ["routes"],
        "operationId": "postlambda"
      },
      "put": {
        "tags": ["routes"],
        "operationId": "putlambda"
      },
      "patch": {
        "tags": ["routes"],
        "operationId": "patchlambda"
      },
      "delete": {
        "tags": ["routes"],
        "operationId": "deletelambda"
      }
    }
  }
}
